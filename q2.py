# -*- coding: utf-8 -*-
"""q2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17KK0ttTcNxXPiVlJpSZ8agGvg_qlvR-W
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Load the datasets
train_data = pd.read_json('hepatitis_training_data.json')
test_data = pd.read_json('hepatitis_testing_data.json')

# Prepare the data
X_train = train_data.drop(columns=['Die_Live'])
y_train = train_data['Die_Live'].apply(lambda x: [1, 0] if x == 1 else [0, 1]).tolist()
X_test = test_data.drop(columns=['Die_Live'])
y_test = test_data['Die_Live'].apply(lambda x: [1, 0] if x == 1 else [0, 1]).tolist()

# Handle missing values by replacing with the mean
X_train.fillna(X_train.mean(), inplace=True)
X_test.fillna(X_test.mean(), inplace=True)

# Normalize the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Build the ANN model
model = Sequential()
model.add(Dense(30, activation='sigmoid', input_shape=(19,)))  # First hidden layer
model.add(Dense(15, activation='sigmoid'))                      # Second hidden layer
model.add(Dense(2, activation='sigmoid'))                       # Output layer

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Model summary
model.summary()

# Train the model
history = model.fit(X_train, np.array(y_train), epochs=50, batch_size=8, validation_split=0.2)

# Evaluate the model
val_loss, val_accuracy = model.evaluate(X_test, np.array(y_test))
print(f'Validation Loss: {val_loss}, Validation Accuracy: {val_accuracy}')

# Make predictions
predictions = model.predict(X_test)
predicted_classes = np.argmax(predictions, axis=1)
true_classes = np.argmax(y_test, axis=1)

# Display predicted class labels for the first 3 test samples
print("Predicted class labels for the first 3 test samples:", predicted_classes[:3])
print("True class labels for the first 3 test samples:", true_classes[:3])

# Generate classification report
report = classification_report(true_classes, predicted_classes, target_names=['Die_Live 1', 'Die_Live 2'])
print(report)

